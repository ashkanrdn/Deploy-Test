#!/usr/bin/env node

var debug = require('debug')('server');
var app = require('../app');
const mongoose = require('mongoose');

app.set('port', process.env.PORT || 3000);


var server =app.listen(app.get('port'), function (){
  debug('Express server listening on port ' + server.address().port);
  console.log('Express server listening on port ' + server.address().port);
})

const io = require('socket.io')(server);

// listen for requests
// var dbURL= 'mongodb://localhost:27017/AMPS'

// mongoose.connect(dbURL, { useUnifiedTopology: true, useNewUrlParser: true, useFindAndModify: false, useCreateIndex: true })
//     .then((result) => server)
//     .then((result)=> io)
//     .then((result)=> console.log('mongo'))
//     .catch((err) => console.log(error));




io.on('connection', (socket) => {
  console.log('Client Connected');

  socket.on('IRGChanged', (state) => {
    console.log('IRGToggle Changed: ' + state);

    io.emit('IRG', state);
  });

  socket.on('IRGCycleChanged', (state) => {
    console.log('IRG Cycle Changed: ' + state);

    io.emit('IRGCycle', state);
  });

  socket.on('IRGCycleChangedNutr', (state) => {
    console.log('IRG Cycle Nutr Changed: ' + state);

    io.emit('IRGCycleNutr', state);
  });

  socket.on('ArmChanged', (state) => {
    console.log('ArmChanged Changed: ' + state);

    io.emit('Arm', state);
  });

  socket.on('ArmCalibrate', (state) => {
    console.log('ArmCalibrate Changed: ' + state);

    io.emit('ArmCalibrated', state);
  });

  socket.on('ArmLocChanged', (state) => {
    console.log('ArmLoc Changed: ' + state);

    io.emit('ArmLoc', state);
  });

  socket.on('rangeChanged', (rangeX) => {
    console.log('range Changed: ' + rangeX);

    io.emit('rangeChanged', rangeX);
  });

  socket.on('Test', (rangeX) => {
    console.log('Test Changed: ' + rangeX);

    io.emit('Test', rangeX);
  });
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });
});